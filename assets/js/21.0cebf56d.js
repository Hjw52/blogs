(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{570:function(t,e,a){"use strict";a.r(e);var r=a(13),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-node简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-node简介"}},[t._v("#")]),t._v(" 1.Node简介")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("node特点")])]),t._v(" "),a("p",[t._v("首先，Node并不是一门语言，而是一种JavaScript的运行环境，使JavaScript脱离浏览器的局限，在服务端也有一定的影响力。Node构成与Chrome类似，除了没有WebKit 和HTML等支持。node基于事件驱动来服务，它可以连接数据库，搭建websocket服务端，玩转多进程等。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e2fd373208944ca9e9cb10ffa37414a~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200928202424042.png"}})]),t._v(" "),a("p",[t._v("它的特点：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("异步I/O：每次调用无须等待之前的I/O调用结束。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4259c3699c8d405dae8eee773e4570b0~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200928203019494.png"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v(" 这样多次调用的耗时取决于最慢的那个任务耗时。\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[t._v("事件与回调：造成代码的编写顺序与执行顺序无关。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("单线程")]),t._v("：JavaScript执行在单线程，无法与其他线程共享状态，无须关注状态的同步问题，但也存在无法利用多核CPU的特点。（但node可利用子进程分担计算任务）")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("跨平台")]),t._v("：通过libuv解决平台差异")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0367256e4f4b869606d030c500d82f~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200928203757602.png"}})]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("node应用场景")])])]),t._v(" "),a("li",[a("p",[t._v("[ ]   1. I/O密集型")])]),t._v(" "),a("li",[a("p",[t._v("[ ]   2. 分布式应用")])]),t._v(" "),a("li",[a("p",[t._v("[ ]   3. 实时应用")])])]),t._v(" "),a("h2",{attrs:{id:"_2-模块机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-模块机制"}},[t._v("#")]),t._v(" 2.模块机制")]),t._v(" "),a("p",[a("strong",[t._v("模块实现")])]),t._v(" "),a("ol",[a("li",[t._v("优先缓存加载")]),t._v(" "),a("li",[t._v("路径分析与文件定位")]),t._v(" "),a("li",[t._v("模块编译（不同的拓展名不同的载入方法）")])]),t._v(" "),a("p",[t._v("在Node中模块分两类：一类Node提供的核心模块，部分核心模块在进程启动时就加载进内存，省略了文件定位和编译，并在路径分析中优先执行；一类用户编写的文件模块，需要进过上面3个步骤，速度较慢。")]),t._v(" "),a("p",[a("strong",[t._v("文件载入")])]),t._v(" "),a("ol",[a("li",[t._v(".js文件 通过fs模块同步读取文件后编译执行。")]),t._v(" "),a("li",[t._v(".node文件 通过dlopen()方法加载。")]),t._v(" "),a("li",[t._v(".json文件  通过fs模块同步读取文件后编译执行，JSON.parse()解析返回。")]),t._v(" "),a("li",[t._v("其他拓展名，按js文件处理。")])]),t._v(" "),a("h4",{attrs:{id:"核心模块引入-从调javascript到底层c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心模块引入-从调javascript到底层c"}},[t._v("#")]),t._v(" 核心模块引入：从调JavaScript到底层C++")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b952e52a0e9447e19d940d5a76bf02a7~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200928205820820.png"}})]),t._v(" "),a("h2",{attrs:{id:"_3-异步i-o"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-异步i-o"}},[t._v("#")]),t._v(" 3.异步I/O")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("为什么要异步I/O？")])]),t._v(" "),a("ol",[a("li",[t._v("I/O的时间是昂贵的")]),t._v(" "),a("li",[t._v("让单线程远离多线程死锁，上下文切换；同时不阻塞I/O。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("异步I/O的现状")])])])]),t._v(" "),a("p",[t._v("操作系统内核对于I/O只有阻塞和非阻塞。这和异步/同步实际上是两回事，即使听起来似乎相同。")]),t._v(" "),a("p",[a("strong",[t._v("阻塞I/O：")]),t._v(" 阻塞I/O的一个特点就是调用之后要等到系统内核完成所以操作，调用才结束。这造成了CPU等待I/O，浪费等待时间。")]),t._v(" "),a("p",[a("strong",[t._v("非阻塞I/O：")]),t._v(" 非阻塞I/O则是调用后立即返回，但返回的只是调用的状态，为了获取回调结果 ，应用程序需要重复调用I/O确认是否完成，称之为轮询。它让CPU处理状态判断，造成CPU资源的浪费。")]),t._v(" "),a("p",[t._v("现有轮询技术：")]),t._v(" "),a("h4",{attrs:{id:"_1-read-最原始-性能最低的方法-重复调用检查i-o状态来获取完整数据的读取。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-read-最原始-性能最低的方法-重复调用检查i-o状态来获取完整数据的读取。"}},[t._v("#")]),t._v(" 1. read：最原始 性能最低的方法，重复调用检查I/O状态来获取完整数据的读取。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0dd8b849d75242da9e84cc263a1377bd~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200921133917566.png"}})]),t._v(" "),a("h4",{attrs:{id:"_2-select-在read的基础上改进-通过对文件描述符的事件状态来判断-由于它采用1024长度的数组来存储状态-所以它最多可同时检查1024个文件描述符。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-select-在read的基础上改进-通过对文件描述符的事件状态来判断-由于它采用1024长度的数组来存储状态-所以它最多可同时检查1024个文件描述符。"}},[t._v("#")]),t._v(" 2. select：在read的基础上改进，通过对文件描述符的事件状态来判断，由于它采用1024长度的数组来存储状态，所以它最多可同时检查1024个文件描述符。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f199ec9455843f0aa31508fa3768c6d~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200921134049320.png"}})]),t._v(" "),a("h4",{attrs:{id:"_3-poll-它采用链表避免数组长度的限制-其次它能避免不需要的检查-但当文件描述符较多时-性能较低。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-poll-它采用链表避免数组长度的限制-其次它能避免不需要的检查-但当文件描述符较多时-性能较低。"}},[t._v("#")]),t._v(" 3. poll：它采用链表避免数组长度的限制，其次它能避免不需要的检查，但当文件描述符较多时，性能较低。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da617310517b436885084f9336fa1dab~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200921134415647.png"}})]),t._v(" "),a("h4",{attrs:{id:"_4-epoll-该方案是linux下效率最高的事件通知机制-在轮询时如果没有检查到i-o事件-将会进行休眠-直到事件将它唤醒-它真实利用事件通知-执行回调-不是遍历查询-不会浪费cpu-执行效率较高。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-epoll-该方案是linux下效率最高的事件通知机制-在轮询时如果没有检查到i-o事件-将会进行休眠-直到事件将它唤醒-它真实利用事件通知-执行回调-不是遍历查询-不会浪费cpu-执行效率较高。"}},[t._v("#")]),t._v(" 4. epoll：该方案是Linux下效率最高的事件通知机制，在轮询时如果没有检查到I/O事件，将会进行休眠，直到事件将它唤醒，它真实利用事件通知，执行回调 不是遍历查询 不会浪费CPU，执行效率较高。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae3b2b2af07a48879ad4f9b662f5996c~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200921134750888.png"}})]),t._v(" "),a("h4",{attrs:{id:"_5-kqueue-该方案实现与epoll类似-不过是在freebsd系统下实现。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-kqueue-该方案实现与epoll类似-不过是在freebsd系统下实现。"}},[t._v("#")]),t._v(" 5. kqueue：该方案实现与epoll类似，不过是在FreeBSD系统下实现。")]),t._v(" "),a("p",[t._v("轮询技术解决了非阻塞I/O获取数据的需求，但对于程序，它仍然是同步，因为它需要等待I/O完全返回，等待期间，CPU要么遍历文件描述符，要么用于休眠等待事件发生。而我们理想的异步是在CPU等待期间也能够处理下一个任务，I/O完成后通过信号或回调将数据传给应用程序。")]),t._v(" "),a("p",[a("strong",[t._v("理想中的异步I/O：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/47d5ed6406584e958377fcd133c0261a~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200921135127431.png"}})]),t._v(" "),a("p",[t._v("Linux存在一方式（AIO）就是通过信号或回调传递数据的，不过AIO仅支持内核I/O的0_DIRECT方式读取，无法读取系统缓存。")]),t._v(" "),a("p",[a("strong",[t._v("现实中的异步I/O：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a763be5481fa4079995ccd156db880b2~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200921140146405.png"}})]),t._v(" "),a("p",[t._v("采用线程池，通过线程之间的通信将I/O得到的数据进行传递，模拟实现异步。")]),t._v(" "),a("p",[a("strong",[t._v("Node的异步I/O：")]),t._v(" 事件循环，观察者，请求对象，I/O线程池")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b16b4871017149e2a2440e2a779c5345~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200921143304773.png"}})]),t._v(" "),a("p",[t._v("事件循环")]),t._v(" "),a("p",[t._v("观察者：判断是否有事件需要处理的过程就是向观察者轮询。")]),t._v(" "),a("p",[t._v("请求对象：从JavaScript发起调用内核到执行完I/O操作的过程，这中间产物叫请求对象。")]),t._v(" "),a("h4",{attrs:{id:"异步api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步api"}},[t._v("#")]),t._v(" 异步API")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("定时器（非精准）")]),t._v(" "),a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ab047857b6b4ff1950b6731cf5eec75~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200922084641077.png"}})])]),t._v(" "),a("p",[t._v("调用setTimeout，setInterval 创建的定时器插入定时器观察者内部的红黑树。每次循环从该红黑树迭代取出定时器对象，检查是否超过定时，如果超过就形成事件，立即执行回调。两个的区别在于setInterval 是重复地检测。")]),t._v(" "),a("p",[t._v("2."),a("strong",[t._v("process.nextTick()")])]),t._v(" "),a("p",[t._v("为了立即执行异步任务，调用next Tick将回调放入队列，下一轮Tick中取出执行。时间复杂度为O(1),而定时器采用红黑树，时间复杂度为O（lg n)，相比下process.nextTick更轻量高效。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/934f21702df44bc7ac5f998264da8384~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200922090133410.png"}})]),t._v(" "),a("p",[t._v("3."),a("strong",[t._v("setImmediate()")])]),t._v(" "),a("p",[t._v("setImmediate与process.nextTick类似，都是延迟执行，但nextTick回调函数保存至数组，setImmediate则保存在链表，nextTick优先级高于setImmediate。这是由于事件循环观察者检查有先后，process.nextTick属于idle观察者，setImmediate属于check观察者。优先级：idle观察者>I/O观察者>check观察者。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/663ff2ad3f8249658ed371281d8577ae~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200922091110606.png"}})]),t._v(" "),a("h2",{attrs:{id:"_4-异步编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-异步编程"}},[t._v("#")]),t._v(" 4.异步编程")]),t._v(" "),a("ul",[a("li",[t._v("异步编程解决方案\n"),a("ol",[a("li",[a("p",[t._v("事件发布/订阅模式")])]),t._v(" "),a("li",[a("p",[t._v("Promise/Deferred模式：Deferred主要用于内部，维护异步模型的状态，Promise作用于外部，通过then()方法暴露给外部添加自定义逻辑。")])])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/701b56a9d6a94a5e9f5f8879d4d78c3d~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200928214203999.png"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v(" ```\n // Deferred实现\n var Deferred = function () {\n  this.state = 'unfulfilled';\n  this.promise = new Promise();\n };\n Deferred.prototype.resolve = function (obj) {\n  this.state = 'fulfilled';\n  this.promise.emit('success', obj);\n };\n Deferred.prototype.reject = function (err) {\n  this.state = 'failed';\n  this.promise.emit('error', err);\n };\n Deferred.prototype.progress = function (data) {\n  this.promise.emit('progress', data);\n }; \n \n // Promise实现\n var Promise = function () {\n  EventEmitter.call(this);\n };\n util.inherits(Promise, EventEmitter);\n Promise.prototype.then = function (fulfilledHandler, errorHandler, progressHandler) {\n  if (typeof fulfilledHandler === 'function') {\n  // 利用once()方法保证成功回调只执行一次\n  this.once('success', fulfilledHandler);\n  }\n  if (typeof errorHandler === 'function') {\n  //利用once()方法保证成功回调只执行一次\n  this.once('error', errorHandler);\n  }\n  if (typeof progressHandler === 'function') {\n  this.on('progress', progressHandler);\n  }\n  return this;\n }; \n ```\n\n Promise.all\n\n ```\n Deferred.prototype.all = function (promises) { \n var count = promises.length;\n  var that = this;\n  var results = [];\n  promises.forEach(function (promise, i) {\n  promise.then(function (data) {\n  count--;\n  results[i] = data;\n  if (count === 0) {\n  that.resolve(results);\n  }\n  }, function (err) {\n  that.reject(err);\n  });\n  });\n  return this.promise;\n }; \n ```\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("流程控制库：Step ，wind")])]),t._v(" "),a("ul",[a("li",[t._v("异步并发控制")])]),t._v(" "),a("ol",[a("li",[t._v("async\n"),a("ul",[a("li",[t._v("async.parallel 无相关依赖")]),t._v(" "),a("li",[t._v("async.waterfall 存在前后依赖")]),t._v(" "),a("li",[t._v("async.auto 自动检查依赖")])])])]),t._v(" "),a("h2",{attrs:{id:"_5-内存控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-内存控制"}},[t._v("#")]),t._v(" 5.内存控制")]),t._v(" "),a("ul",[a("li",[t._v("V8垃圾回收与内存限制")]),t._v(" "),a("li",[t._v("如何使用好内存")])]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("垃圾回收算法")])]),t._v(" "),a("p",[t._v("Mark-Sweep & Mark-Compact")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd6580dfeebb45b584bb3be483cd6749~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200928215651219.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3337d42a7c9648a58cb6b733a8fe9bca~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200928215735206.png"}})]),t._v(" "),a("ul",[a("li",[t._v("Scavenge")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ebd40ea593e486faded2bf538c4eb13~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200928220014481.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/37a741262fa14b3ba8efedd5c1419fbd~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200923135728747.png"}})]),t._v(" "),a("ul",[a("li",[t._v("buffer对象不经V8内存分配机制，不会有堆内存大小限制。")])]),t._v(" "),a("h2",{attrs:{id:"_6-buffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-buffer"}},[t._v("#")]),t._v(" 6.Buffer")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("buffer的结构")])]),t._v(" "),a("li",[a("p",[t._v("buffer的转换，宽字节编码容易形成乱码")])])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var fs = require('fs');\nvar rs = fs.createReadStream('test.md');\nvar data = '';\nrs.on(\"data\", function (chunk){\n data += chunk;\n});\nrs.on(\"end\", function () {\n console.log(data);\n});\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("这段代码用于流读取规范，chunk即buffer对象。这段代码对于英文可能没问题，但遇到宽字节编码就会产生乱码。问题在于")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" data += chunk;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这句话相当于toString操作，等价于：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("data = data.toString() + chunk.toString(); \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("当我们读取中文静夜思来测试时，有可能产生")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd4a0aa408d94481ad0ea8f8fcbe27d3~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200924140621994.png"}})]),t._v(" "),a("p",[t._v("原因：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bcd003aa8fa94e0db5c65520ddb634b8~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200924140716694.png"}})]),t._v(" "),a("p",[t._v("通过setEncoding()，ཨstring_decoder模块可以解决表面上的问题 ，但不改变实质。正确的拼接方式应该是用数组存储buffer，由小合并成大buffer。")]),t._v(" "),a("ul",[a("li",[t._v("读取相同一个大文件，hightWaterMark（每次读取限定值）越大，读取速度越快。")])]),t._v(" "),a("h2",{attrs:{id:"_7-网络编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-网络编程"}},[t._v("#")]),t._v(" 7.网络编程")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("TCP与UDP")])]),t._v(" "),a("li",[a("p",[t._v("HTTP与HTTPS")])]),t._v(" "),a("li",[a("p",[t._v("webcocket")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/146a8aaf40aa47f7944b4fb916260842~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200925135725261.png"}})]),t._v(" "),a("h2",{attrs:{id:"_8-构建web应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-构建web应用"}},[t._v("#")]),t._v(" 8.构建web应用")]),t._v(" "),a("ul",[a("li",[t._v("数据上传")]),t._v(" "),a("li",[t._v("路由解析")]),t._v(" "),a("li",[t._v("中间件")]),t._v(" "),a("li",[t._v("页面渲染")])]),t._v(" "),a("h2",{attrs:{id:"_9-进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-进程"}},[t._v("#")]),t._v(" 9.进程")]),t._v(" "),a("p",[t._v("严格意义上讲，Node并非真正单线程架构。它自身还有一定的I/O线程存在，由底层libuv处理。单线程是指："),a("strong",[t._v("JavaScript代码永远运行在V8上，所以称单线程")]),t._v("。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("子进程")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29bd6ec41a65418ba4344161a1b8e1e3~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200927134718811.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8adca380718a42aebbd19bca73e5a0db~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200927134921824.png"}})]),t._v(" "),a("p",[t._v("补充：JavaScript文件通过execFile 必须在首行添加，才能成为可直接执行文件。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#!/usr/bin/env node\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[a("strong",[t._v("进程间通信")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f62abdd3e1b4f82a27ecba6c894781d~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200927135920039.png"}})]),t._v(" "),a("p",[t._v("补充：只有子进程为node进程时，才会根据环境变量去连接IPC通道。其他类型无法实现进程间通信。")]),t._v(" "),a("ul",[a("li",[t._v("句柄传递")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5533a434345146e8a13e942ef55e55dd~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200928085804898.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26541bef1cc0459993a527bcae642944~tplv-k3u1fbpfcp-watermark.image",alt:"image-20200928085825502.png"}})])])}),[],!1,null,null,null);e.default=s.exports}}]);