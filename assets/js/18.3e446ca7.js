(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{567:function(e,s,t){"use strict";t.r(s);var a=t(13),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"一、单线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、单线程"}},[e._v("#")]),e._v(" 一、单线程")]),e._v(" "),t("p",[t("strong",[e._v("JavaScript代码运行在单线程")])]),e._v(" "),t("p",[e._v("单线程特点就是同一时间只做一件事，避免了多线程的锁机制和数据同步问题。JavaScript虽然没有多线程，但也提供的webworker子线程，用于一些辅助计算（不得操作DOM）。MDN关于"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers",target:"_blank",rel:"noopener noreferrer"}},[e._v("webworker"),t("OutboundLink")],1),e._v("的解释，大体是将JS代码运行在另一个全局上下文。")]),e._v(" "),t("h3",{attrs:{id:"二、任务队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、任务队列"}},[e._v("#")]),e._v(" 二、任务队列")]),e._v(" "),t("p",[e._v('单线程意味着阻塞，很多时候CPU空闲，而IO操作却耗时造成了阻塞。但JavaScript异步任务可以让主线程暂时忽略阻塞IO的操作，挂起等待的任务先执行后面的操作，等I/O返回结果后，再回过头执行。异步对习惯编写同步代码的人来讲，或许有点“奇葩”。任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入"任务队列"（task queue）的任务，只有"任务队列"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。')]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/Hjw52/Blog/blob/master/image/733258-20200710170606245-1301109876.png?raw=true",alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("执行机制：")])]),e._v(" "),t("ol",[t("li",[e._v("有同步任务都在主线程上执行，形成一个执行栈。")]),e._v(" "),t("li",[e._v('主线程之外，还存在一个"任务队列"（task queue）。只要异步任务有了运行结果，就在"任务队列"之中放置一个事件。')]),e._v(" "),t("li",[e._v('一旦"执行栈"中的所有同步任务执行完毕，系统就会读取"任务队列"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。')]),e._v(" "),t("li",[e._v("主线程不断重复上面的第三步。")])]),e._v(" "),t("p",[e._v("看下这段代码：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("console.log(1);\nsetTimeout(function(){\n    console.log(2);\n    process.nextTick(function(){\n        console.log(3);\n    })\n},0)\nconsole.log(4);\nprocess.nextTick(function(){\n    console.log(5)\n})\n// 1 4 5 2 3\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br")])]),t("ol",[t("li",[e._v("一开始JavaScript代码进入主线程，console.log同步任务，输出1。")]),e._v(" "),t("li",[e._v("往下运行遇到setTimeOut，这边属于异步任务，在任务队列注册定时器事件后继续向下执行，事件将在“0秒”后运行。（异步任务只有同步任务先执行完（主线程空闲）才会去执行，这边setTimeOut（fn,0) 在Node环境被编译成这边setTimeOut（fn,1)，而在浏览器最低是4毫秒，所以加上主线程的一些延迟，0毫秒是达不到的，只能是尽快执行。）")]),e._v(" "),t("li",[e._v("setTimeOut往下遇到console.log 输出4。")]),e._v(" "),t("li",[e._v("遇到process.nextTick，异步任务，它表示当前执行栈为空时执行，即下一次事件轮询前执行，所以它比setTimeout先执行。")]),e._v(" "),t("li",[e._v("主线程执行完，到任务队列拿出定时器事件执行，依次输出 2 3。")]),e._v(" "),t("li",[e._v("所以综上输出顺序：1 4 5 2 3")])]),e._v(" "),t("p",[e._v("也许你会有所疑惑，上面同步和异步代码的划分和优先级，实际JavaScript运行机制事件轮询其实更准确的划分为宏任务和微任务：")]),e._v(" "),t("ul",[t("li",[e._v("**宏任务：**整体的script代码、setTimeout、setInterval、new promise函数内容、setImmediate（Node）")]),e._v(" "),t("li",[e._v("**微任务：**promise.then、process.nextTic、MutaionObserver")])]),e._v(" "),t("p",[e._v("所以上面的图更准确的为：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/Hjw52/Blog/blob/master/image/1.png?raw=true",alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("执行机制：")])]),e._v(" "),t("ol",[t("li",[e._v("JavaScript引擎的事件轮询首先进入整体代码（宏任务），从上到下执行，遇到宏任务则加入宏任务队列，遇到微任务则加入微任务队列，每次宏任务执行完都会执行清空微任务队列。")]),e._v(" "),t("li",[e._v("拿出下一个宏任务执行，以此循环。")]),e._v(" "),t("li",[e._v("大致为：宏任务=>微任务=>宏任务=>微任务  ....不断循环。")])]),e._v(" "),t("p",[e._v("让我们再看看这段代码：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("setTimeout(function() {\n    console.log('setTimeout');\n})\n\nnew Promise(function(resolve) {\n    console.log('promise');\n}).then(function() {\n    console.log('then');\n})\n\nconsole.log('console');\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("ol",[t("li",[e._v("首先script代码为宏任务，进入主线程。")]),e._v(" "),t("li",[e._v("遇到setTimeout，注册回调，下一次宏任务执行")]),e._v(" "),t("li",[e._v("接下来遇到new Promise 函数内代码立即执行，then函数加入微任务队列")]),e._v(" "),t("li",[e._v("遇到console.log立即执行，第一个宏任务结束")]),e._v(" "),t("li",[e._v("拿出微任务队列的then 函数执行，输出then")]),e._v(" "),t("li",[e._v("微任务执行完成进入下一次宏任务。")])]),e._v(" "),t("h4",{attrs:{id:"node的事件轮询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node的事件轮询"}},[e._v("#")]),e._v(" Node的事件轮询")]),e._v(" "),t("p",[e._v("node由于是运行在服务端的js，它的环境与浏览器并不完全相同，所以它的事件轮询也不相同。它是分阶段的：")]),e._v(" "),t("ol",[t("li",[e._v("timers: 执行"),t("code",[e._v("setTimeout")]),e._v("和"),t("code",[e._v("setInterval")]),e._v("的回调")]),e._v(" "),t("li",[e._v("pending callbacks: 执行延迟到下一个循环迭代的 I/O 回调")]),e._v(" "),t("li",[e._v("idle, prepare: 仅系统内部使用（process.NextTick在这检查）")]),e._v(" "),t("li",[e._v("poll: 检索新的 I/O 事件;执行与 I/O 相关的回调。事实上除了其他几个阶段处理的事情，其他几乎所有的异步都在这个阶段处理。")]),e._v(" "),t("li",[e._v("check: "),t("code",[e._v("setImmediate")]),e._v("在这里执行")]),e._v(" "),t("li",[e._v("close callbacks: 一些关闭的回调函数，如："),t("code",[e._v("socket.on('close', ...)")])])]),e._v(" "),t("p",[e._v("关于"),t("strong",[e._v("Process.nextTick 和 setImmediate")]),e._v("，在两者同级的情况下，nextTick优先级高于 setImmediate。下图形象地说明两者的关系：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A();\nB();\nC();\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/ba47432176970aeb9e9df4c3cbb3a623_r.jpg?source=1940ef5c",alt:"preview"}})]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A();\nprocess.nextTick(B);\nC();\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/3a591f00cfe6b3c3b51137c2a8bda382_720w.jpg?source=1940ef5c",alt:"img"}})]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("A();\nsetImmediate(B);\nC();\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/2d5e6e9335f8972b0d5a6e010871d828_r.jpg?source=1940ef5c",alt:"preview"}})]),e._v(" "),t("p",[e._v('绿色可理解为宏任务队列，黄色可理解为微任务队列。process.nextTick指定的回调函数是在本次"事件循环"触发，而setImmediate指定的是在下次"事件循环"触发，所以很显然，前者总是比后者发生得早，而且执行效率也高（因为不用检查"任务队列"）')]),e._v(" "),t("h3",{attrs:{id:"定时器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定时器"}},[e._v("#")]),e._v(" 定时器")]),e._v(" "),t("p",[e._v("常见的定时器有以下三种：")]),e._v(" "),t("ul",[t("li",[e._v("setTimeOut，执行一次 。")]),e._v(" "),t("li",[e._v("setinterval，重复执行 。")]),e._v(" "),t("li",[e._v("setImmediate（Node环境）尽早执行，类似setTimeOut（fn,0）时间或长或短。")])]),e._v(" "),t("p",[e._v("定时器只保证事件在任务队列里注册，并不能保证事件能按时执行。实际上时间到期后，异步任务返回值加到任务队列还需要等待主线程的空闲才能被执行。如果前面宏任务耗时太长，那也只能等待，造成延迟远远大于预定值。")]),e._v(" "),t("h4",{attrs:{id:"settimeout-fn-0-与setimmediate谁快"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#settimeout-fn-0-与setimmediate谁快"}},[e._v("#")]),e._v(" setTimeout（fn,0）与setImmediate谁快？")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Node环境\nconsole.log('test');\n\nsetTimeout(() => {\n  console.log('setTimeout');\n}, 0);\n\nsetImmediate(() => {\n  console.log('setImmediate');\n});\n// setTimeout可能比setImmediate早，也可能晚输出\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("p",[t("strong",[e._v("原因：")])]),e._v(" "),t("ol",[t("li",[e._v("外层同步代码一次性全部执行完，遇到异步API就塞到对应的阶段")]),e._v(" "),t("li",[e._v("遇到"),t("code",[e._v("setTimeout")]),e._v("，虽然设置的是0毫秒触发，但是被node.js强制改为1毫秒，塞入"),t("code",[e._v("times")]),e._v("阶段")]),e._v(" "),t("li",[e._v("遇到"),t("code",[e._v("setImmediate")]),e._v("塞入"),t("code",[e._v("check")]),e._v("阶段")]),e._v(" "),t("li",[e._v("同步代码执行完毕，进入Event Loop")]),e._v(" "),t("li",[e._v("先进入"),t("code",[e._v("times")]),e._v("阶段，检查当前时间过去了1毫秒没有，如果过了1毫秒，满足"),t("code",[e._v("setTimeout")]),e._v("条件，执行回调，如果没过1毫秒，跳过")]),e._v(" "),t("li",[e._v("跳过空的阶段，进入check阶段，执行"),t("code",[e._v("setImmediate")]),e._v("回调")])]),e._v(" "),t("h4",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])])])}),[],!1,null,null,null);s.default=n.exports}}]);